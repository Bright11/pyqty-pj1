# Form implementation generated from reading ui file 'sales.ui'
#
# Created by: PyQt6 UI code generator 6.6.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QTableWidget, QTableWidgetItem, QHeaderView, QAbstractItemView, QMessageBox,QWidget
from PyQt6.QtGui import QFont,QIcon,QPen,QColor
from PyQt6.QtCore import Qt, QSize, QRect, QPoint, QEvent

from Textslider import Slider, count, text,txt

# MESSAGE

# importing printer
# from PyQt6.QtPrintSupport import QPrinter, QPrintDialog, QPrintPreviewDialog
from PyQt6.QtPrintSupport import QPrinter, QPrintDialog, QPrintPreviewDialog
from PyQt6.QtGui import QPainter
# Import the PrintPreviewWidget class


from connection import databasename
import sqlite3



class Ui_MainWindow(QWidget):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1600, 700)
        self.closethispage=MainWindow
        MainWindow.setWindowIcon(QIcon('logo/logo.jpeg'))
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(30, 0, 1311, 91))
        self.frame.setMouseTracking(False)
        self.frame.setTabletTracking(False)
        self.frame.setStyleSheet("QFrame{\n"
"background-color:blue;\n"
"}")
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.Panel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.frame.setLineWidth(10)
        self.frame.setMidLineWidth(10)
        self.frame.setObjectName("frame")
        self.label_slider = QtWidgets.QLabel(parent=self.frame)
        self.label_slider.setGeometry(QtCore.QRect(30, 30, 1311, 40))
        font = QtGui.QFont()
        font.setFamily("Impact")
        font.setPointSize(26)
        font.setBold(False)
        font.setWeight(50)
        self.label_slider.setFont(font)
        self.label_slider.setStyleSheet("QLabel{\n"
"color:rgb(255, 255, 255)\n"
"}")
        self.label_slider.setObjectName("label_slider")
        self.frame_2 = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame_2.setGeometry(QtCore.QRect(20, 100, 1311, 61))
        self.frame_2.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_2.setObjectName("frame_2")
        self.horizontalLayoutWidget = QtWidgets.QWidget(parent=self.frame_2)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(10, 0, 1301, 61))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.add_btn = QtWidgets.QPushButton(parent=self.horizontalLayoutWidget)
        self.add_btn.setStyleSheet("QPushButton{\n"
"background-color:blue;\n"
"color:white\n"
"\n"
"}")
        self.add_btn.setObjectName("add_btn")
        self.add_btn.setFont(QFont("sanserif",18))
        self.horizontalLayout_2.addWidget(self.add_btn)
        self.sale_btn = QtWidgets.QPushButton(parent=self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.sale_btn.setFont(font)
        self.sale_btn.setStyleSheet("QPushButton{\n"
"color:white;\n"
"background-color:blue;\n"
"\n"
"}")
        self.sale_btn.setObjectName("sale_btn")
        self.horizontalLayout_2.addWidget(self.sale_btn)
        self.users_btn = QtWidgets.QPushButton(parent=self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.users_btn.setFont(QFont("sanserif",18))
        self.users_btn.setStyleSheet("QPushButton{\n"
"color:white;\n"
"background-color:blue;\n"
"\n"
"}")
        self.users_btn.setObjectName("users_btn")
        self.horizontalLayout_2.addWidget(self.users_btn)
        self.customer_btn = QtWidgets.QPushButton(parent=self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.customer_btn.setFont(QFont("sanserif",18))
        self.customer_btn.setStyleSheet("QPushButton{\n"
"color:white;\n"
"background-color:blue;\n"
"\n"
"}")
        self.customer_btn.setObjectName("customer_btn")
        self.horizontalLayout_2.addWidget(self.customer_btn)
        self.workers_btn = QtWidgets.QPushButton(parent=self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.workers_btn.setFont(QFont("sanserif",18))
        self.workers_btn.setStyleSheet("QPushButton{\n"
"color:white;\n"
"background-color:blue;\n"
"\n"
"}")
        self.workers_btn.setObjectName("workers_btn")
        self.horizontalLayout_2.addWidget(self.workers_btn)
        self.expensive_btn = QtWidgets.QPushButton(parent=self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.expensive_btn.setFont(QFont("sanserif",18))
        self.expensive_btn.setStyleSheet("QPushButton{\n"
"color:white;\n"
"background-color:blue;\n"
"\n"
"}")
        self.expensive_btn.setObjectName("expensive_btn")
        self.horizontalLayout_2.addWidget(self.expensive_btn)
        self.riders_btn = QtWidgets.QPushButton(parent=self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.riders_btn.setFont(QFont("sanserif",18))
        self.riders_btn.setStyleSheet("QPushButton{\n"
"color:white;\n"
"background-color:blue;\n"
"\n"
"}")
        self.riders_btn.setObjectName("riders_btn")
        self.horizontalLayout_2.addWidget(self.riders_btn)
        self.calculator_btn = QtWidgets.QPushButton(parent=self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.calculator_btn.setFont(QFont("sanserif",18))
        self.calculator_btn.setStyleSheet("QPushButton{\n"
"color:white;\n"
"background-color:blue;\n"
"\n"
"}")
        self.calculator_btn.setObjectName("calculator_btn")
        self.horizontalLayout_2.addWidget(self.calculator_btn)
        self.frame_table = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame_table.setGeometry(QtCore.QRect(439, 220, 891, 351))
        self.frame_table.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_table.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_table.setObjectName("frame_table")
        self.frame_3 = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame_3.setGeometry(QtCore.QRect(19, 219, 401, 381))
        self.frame_3.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_3.setObjectName("frame_3")
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(parent=self.frame_3)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(-1, -1, 401, 41))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.lineEdit_buy_qty = QtWidgets.QLineEdit(parent=self.horizontalLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit_buy_qty.setFont(font)
        self.lineEdit_buy_qty.setObjectName("lineEdit_buy_qty")
        self.horizontalLayout.addWidget(self.lineEdit_buy_qty)
        self.submit_qty_btn = QtWidgets.QPushButton(parent=self.horizontalLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.submit_qty_btn.setFont(QFont("sanserif",18))
        self.submit_qty_btn.setStyleSheet("QPushButton{\n"
"\n"
"background-color:blue;\n"
"color:white;\n"
"}")
        self.submit_qty_btn.setObjectName("submit_qty_btn")
        self.horizontalLayout.addWidget(self.submit_qty_btn)
        self.frame_table_selling = QtWidgets.QFrame(parent=self.frame_3)
        self.frame_table_selling.setGeometry(QtCore.QRect(-1, 39, 401, 271))
        self.frame_table_selling.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_table_selling.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_table_selling.setObjectName("frame_table_selling")
        self.horizontalLayoutWidget_3 = QtWidgets.QWidget(parent=self.frame_3)
        self.horizontalLayoutWidget_3.setGeometry(QtCore.QRect(10, 320, 401, 31))
        self.horizontalLayoutWidget_3.setObjectName("horizontalLayoutWidget_3")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_3)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.complete_btn = QtWidgets.QPushButton(parent=self.horizontalLayoutWidget_3)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.complete_btn.setFont(QFont("sanserif",18))
        self.complete_btn.setStyleSheet("QPushButton{\n"
"\n"
"background-color:blue;\n"
"color:white;\n"
"}")
        self.complete_btn.setObjectName("complete_btn")
        self.horizontalLayout_3.addWidget(self.complete_btn)
        self.print_btn = QtWidgets.QPushButton(parent=self.horizontalLayoutWidget_3)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.print_btn.setFont(QFont("sanserif",18))
        self.print_btn.setStyleSheet("QPushButton{\n"
"\n"
"background-color:blue;\n"
"color:white;\n"
"}")
        self.print_btn.setObjectName("print_btn")
        self.horizontalLayout_3.addWidget(self.print_btn)
        self.frame_5 = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame_5.setGeometry(QtCore.QRect(30, 170, 651, 41))
        self.frame_5.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_5.setObjectName("frame_5")
        self.horizontalLayoutWidget_4 = QtWidgets.QWidget(parent=self.frame_5)
        self.horizontalLayoutWidget_4.setGeometry(QtCore.QRect(-1, 0, 301, 41))
        self.horizontalLayoutWidget_4.setObjectName("horizontalLayoutWidget_4")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_4)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label = QtWidgets.QLabel(parent=self.horizontalLayoutWidget_4)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.horizontalLayout_4.addWidget(self.label)
        self.lineEdit = QtWidgets.QLineEdit(parent=self.horizontalLayoutWidget_4)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit.setFont(font)
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout_4.addWidget(self.lineEdit)
        self.horizontalLayoutWidget_5 = QtWidgets.QWidget(parent=self.frame_5)
        self.horizontalLayoutWidget_5.setGeometry(QtCore.QRect(330, 0, 301, 41))
        self.horizontalLayoutWidget_5.setObjectName("horizontalLayoutWidget_5")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_5)
        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.label_2 = QtWidgets.QLabel(parent=self.horizontalLayoutWidget_5)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_5.addWidget(self.label_2)
        self.lineEdit_2 = QtWidgets.QLineEdit(parent=self.horizontalLayoutWidget_5)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit_2.setFont(font)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.horizontalLayout_5.addWidget(self.lineEdit_2)
        self.horizontalLayoutWidget_8 = QtWidgets.QWidget(parent=self.centralwidget)
        self.horizontalLayoutWidget_8.setGeometry(QtCore.QRect(840, 170, 481, 41))
        self.horizontalLayoutWidget_8.setObjectName("horizontalLayoutWidget_8")
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_8)
        self.horizontalLayout_9.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.lineEdit_search = QtWidgets.QLineEdit(parent=self.horizontalLayoutWidget_8)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit_search.setFont(font)
        self.lineEdit_search.setObjectName("lineEdit_search")
        self.horizontalLayout_9.addWidget(self.lineEdit_search)
        self.search_btn = QtWidgets.QPushButton(parent=self.horizontalLayoutWidget_8)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.search_btn.setFont(QFont("sanserif",18))
        self.search_btn.setStyleSheet("QPushButton{\n"
"background-color:blue;\n"
"color:white;\n"
"}")
        self.search_btn.setObjectName("search_btn")
        self.horizontalLayout_9.addWidget(self.search_btn)
        self.frame_4 = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame_4.setGeometry(QtCore.QRect(730, 580, 221, 41))
        self.frame_4.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_4.setObjectName("frame_4")
        self.clear_table_btn = QtWidgets.QPushButton(parent=self.frame_4)
        self.clear_table_btn.setGeometry(QtCore.QRect(20, 10, 181, 23))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.clear_table_btn.setFont(QFont("sanserif",18))
        self.clear_table_btn.setStyleSheet("QPushButton{\n"
"background-color:blue;\n"
"color:white\n"
"\n"
"}")
        self.clear_table_btn.setObjectName("clear_table_btn")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
        
        self.selling_table()
        self.buy_now_table()
        self.slider()
        
        self.customer_btn.clicked.connect(self.customers_page)
        
        
        
        self.add_btn.clicked.connect(self.open_Additem)
        self.workers_btn.clicked.connect(self.openworkerspages)
        
        self.submit_qty_btn.clicked.connect(self.insert_selling)
        
        self.search_btn.clicked.connect(self.search_data)
        
        self.clear_table_btn.clicked.connect(self.refresh_tabel)
        
        self.riders_btn.clicked.connect(self.openriderpage)
        self.calculator_btn.clicked.connect(self.opencalculate)
        
        self.complete_btn.clicked.connect(self.complete_sale)
        
        self.print_btn.clicked.connect(self.print_preview)
        
        self.users_btn.clicked.connect(self.opencsv)
        


    def refresh_tabel(self):
            self.lineEdit_search.clear()
            self.selling_data()
            
    def selling_table(self):
            
            self.table=QTableWidget(self.frame_table)
            
            self.table.setColumnCount(7)
      
            self.table.resize(891, 351)
            self.table.setEditTriggers(QAbstractItemView.EditTrigger.NoEditTriggers)
            self.table.setSelectionBehavior(QAbstractItemView.SelectionBehavior.SelectRows)
            self.table.setShowGrid(False)
            self.table.setWordWrap(True)
            self.table.setCornerButtonEnabled(False)
            self.table.setColumnWidth(0, 100)
            self.table.setAlternatingRowColors(True)
            self.table.verticalHeader().setVisible(False)
            self.table.horizontalHeader().setVisible(True)
            self.table.horizontalHeader().setStretchLastSection(True)
            self.table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)
            
            self.table.setSortingEnabled(True)
            self.table.horizontalHeader().setStyleSheet("QHeaderView::section{background-color:black; color:white; font-size:15px}")
            self.table.setStyleSheet(" color:black")
            self.table.move(0,0)
            self.table.setHorizontalHeaderLabels(['ID','Name','Category','Selling Price','Qty','Qrcode','Voltage'])
            
            self.selling_data()
    
    def selling_data(self):
            conn=sqlite3.connect(databasename)
            cur=conn.cursor()
            cur.execute("select * from items")
            rows=cur.fetchall()
            conn.close()
            self.table.setRowCount(len(rows))
            for data, form in enumerate(rows):
                self.table.setItem(data, 0, QTableWidgetItem(str(form[0])))
                self.table.setItem(data, 1, QTableWidgetItem(str(form[1])))
                self.table.setItem(data, 2, QTableWidgetItem(str(form[2])))
                self.table.setItem(data, 3, QTableWidgetItem(str(form[3])))
                self.table.setItem(data, 4, QTableWidgetItem(str(form[5])))
                self.table.setItem(data, 5, QTableWidgetItem(str(form[6])))
                self.table.setItem(data, 6, QTableWidgetItem(str(form[7])))
         
                self.table.horizontalHeader().setStretchLastSection(True)
                
                
                
            self.table.itemClicked.connect(self.get_selling)
            
           
         
    def buy_now_table(self):
        #      add item into sales tabel
            self.table_sale = QTableWidget(self.frame_table_selling)
        #     self.table_sale.setRowCount()
            self.table_sale.setColumnCount(6)
            self.table_sale.resize(401, 351)
            self.table_sale.setEditTriggers(QAbstractItemView.EditTrigger.NoEditTriggers)
            self.table_sale.setSelectionBehavior(QAbstractItemView.SelectionBehavior.SelectRows)
            self.table_sale.setShowGrid(False)
            self.table_sale.setWordWrap(True)
            self.table_sale.setCornerButtonEnabled(False)
            self.table_sale.setColumnWidth(0, 10)
           
            
            self.table_sale.setAlternatingRowColors(True)
            self.table_sale.verticalHeader().setVisible(False)
            self.table_sale.horizontalHeader().setVisible(True)
            self.table_sale.horizontalHeader().setStretchLastSection(True)
            self.table_sale.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)
        #     scroll
            self.table_sale.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOn)
            self.table_sale.setVerticalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOn)
            self.table_sale.setEditTriggers(QAbstractItemView.EditTrigger.NoEditTriggers)
            self.table_sale.setSortingEnabled(True)
            self.table_sale.horizontalHeader().setStyleSheet("QHeaderView::section{background-color:black; color:white; font-size:15px}")
            self.table_sale.setStyleSheet(" color:black")
            self.table_sale.move(0, 0)
            
            self.table_sale.setHorizontalHeaderLabels(['ID', 'Name', 'Selling Price','Total', 'Qty', 'Voltage'])
            
            self.selling()
            
           
            self.table_sale.itemDoubleClicked.connect(self.remove_sales_item)     

    def selling(self):
            global totalprices
        #     get data from database where order status is new order
            conn=sqlite3.connect(databasename)
            cur=conn.cursor()
            cur.execute("SELECT * FROM sales WHERE order_status=?",("buying",))
        #     sum
           
            
            rows=cur.fetchall()
            conn.close()
            
            
            con=sqlite3.connect(databasename)
            c=con.cursor()
          
            c.execute("SELECT SUM(total_price) FROM sales WHERE order_status='buying'")
            totalprices=c.fetchone()[0]
            
            con.close()
            
            self.complete_btn.setText(_translate("MainWindow", f"Order {totalprices}"))
           
            self.table_sale.setRowCount(len(rows))
            for items,data in enumerate(rows):
                #     get total of all items
                    self.table_sale.setItem(items,0,QTableWidgetItem(str(data[0])))
                    self.table_sale.setItem(items,1,QTableWidgetItem(str(data[2])))
                    self.table_sale.setItem(items,2,QTableWidgetItem(str(data[3])))
                    self.table_sale.setItem(items,3,QTableWidgetItem(str(data[4])))
                    self.table_sale.setItem(items,4,QTableWidgetItem(str(data[5])))
                    self.table_sale.setItem(items,5,QTableWidgetItem(str(data[6])))      
   
       
       

    def get_selling(self,item):
            
            global item_id
            global getvalues
            global total
            num_order=1
            order_status="completed"
            item_id = item.text()
        #     int(self.lineEdit_buy_qty.setText(1))
        # make linedit_buy_qty to 1
            self.lineEdit_buy_qty.setText(str(num_order))
        
            
        #     add item into database
            conn = sqlite3.connect(databasename)
            c = conn.cursor()
            c.execute("SELECT * FROM items WHERE id=?", (item_id,))
        #   fetch one
            rows = c.fetchone()
        #     add into database
            total=rows[3]
            getvalues=values=(
                #     get item valus from database
                rows[0],
                rows[1],
                # rows[2],
                # rows[3],
                total,
                #     get selling price from line edit
               
                # rows[5],
                rows[6],
                rows[7],
                #     get qty from line edit
                self.lineEdit_buy_qty.text(),
                #     get date from date edit
                # order status
                order_status
                
            )

            conn.close()
       
    
            
           
    def insert_selling(self):
         
        #     get the values and add it into database
            conn = sqlite3.connect(databasename)
            c = conn.cursor()
        #     get the total into getvalues and include it into database
          
    
        
            c.execute("INSERT INTO sales ( order_id,name, price, total_price, qty, voltage, order_status) VALUES (?,?,?, ?, ?, ?, ?)",
          (getvalues[0],getvalues[1], getvalues[2], int(total) * int(self.lineEdit_buy_qty.text()), int(self.lineEdit_buy_qty.text()), getvalues[4], "buying"))

            conn.commit()
            conn.close()
            QMessageBox.information(self,"Success", "Item Added")
            self.selling()
            

# search query
    def search_data(self):
           self.table.clearContents()
           self.table.setRowCount(0)
           conn=sqlite3.connect(databasename)
           cur = conn.cursor()  # Assuming `conn` is your SQLite database connection
           query = "SELECT * FROM items WHERE category LIKE ?"
           search_term = '%' + self.lineEdit_search.text() + '%'  # Assuming `self.lineEdit_search.text()` contains the search term
           cur.execute(query, (search_term,))
           rows = cur.fetchall()
           conn.close()
           self.table.setRowCount(len(rows))
           for data, form in enumerate(rows):
                self.table.setItem(data, 0, QTableWidgetItem(str(form[0])))
                self.table.setItem(data, 1, QTableWidgetItem(str(form[1])))
                self.table.setItem(data, 2, QTableWidgetItem(str(form[2])))
                self.table.setItem(data, 3, QTableWidgetItem(str(form[3])))
                self.table.setItem(data, 4, QTableWidgetItem(str(form[5])))
                self.table.setItem(data, 5, QTableWidgetItem(str(form[6])))
                self.table.setItem(data, 6, QTableWidgetItem(str(form[7])))
            

# uodate many items
    def complete_sale(self):
            global getvalues
            global total
            conn = sqlite3.connect(databasename)
            c = conn.cursor()
            c.execute("SELECT * FROM sales WHERE order_status= 'buying'")
            record=c.fetchall()
     
            for index in record:
                
                #     get the qty of from sales table and minus it from items table
                    sales_qty=int(index[5])
                #     select data in items table where id's are equal to index 1 of all data
                    c.execute("SELECT * FROM items WHERE id=?", (index[1], ))
                    rows=c.fetchone()
                #     print("rows", rows[5])
                    items_qty=int(rows[5])
                    
               
                    new_qty=items_qty-sales_qty
                
                    c.execute("UPDATE items SET qty=? WHERE id=?", (new_qty, index[1]))
                    c.execute("UPDATE sales SET order_status=? WHERE order_id=?", ("completed", index[1]))
               
            conn.commit()
            conn.close()
            self.selling_data()
            
            QMessageBox.information(self, "Success", "Order Completed")
            self.print_preview()
            self.selling()
            


        
            
    def print_preview(self):
        if self.lineEdit.text()=="" or self.lineEdit_2.text()=="":
                return QMessageBox.information(self, "Information", "All fields are required")
        printer = QPrinter()
        previewDialog = QPrintPreviewDialog(printer)
     

        def print_table():
          
            painter = QPainter()
            painter.begin(printer)
            
            self.table_sale.resize(800, 351)
            self.table_sale.render(painter)
            table_width=self.table_sale.width()
            table_height=self.table_sale.height()
            
            # Add customer name into the printer using lineEdit_cus_name
        #     text = "Customer Name: " + self.lineEdit.text()
        #     painter.drawText(0, 0, text)
            # Add customer name into the printer using lineEdit_cus_name
          
            cus_name = "Customer Name: " + self.lineEdit.text()
            cus_number = "Customer Number: " + self.lineEdit_2.text()
            item_total = f"Total price: {totalprices} " 
           
       
            
            font = painter.font()
            font.setPointSize(12)  # Adjust size as needed
            painter.setFont(font)
            painter.setPen(QColor("black"))  # Set text color to black
            
            text_y=table_height + 20
            
            painter.drawText(20, text_y, cus_name)
            painter.drawText(20, text_y + 20, cus_number)
            painter.drawText(20, text_y +50, str(item_total))
            
            
           
            
            # Add customer number into the printer
            # painter.drawText(0, 20, "Customer Number: " + self.lineEdit_2.text())
            
            # Add date into the printer
            # painter.drawText(0, 40, "Date: " + self.dateEdit.text())
            
            painter.end()

        previewDialog.paintRequested.connect(print_table)
        previewDialog.setWindowTitle("Print Preview")
        previewDialog.exec()
         
           
            
# remove item from sales table on double clicke
    def remove_sales_item(self,item_id):
            item_id=item_id.text()
         
            conn = sqlite3.connect(databasename)
            c = conn.cursor()
            c.execute("DELETE FROM sales WHERE id=?", (item_id,))
            conn.commit()
            conn.close()
            self.selling()
            QMessageBox.information(self, "Success", "Item Removed")
            
       
            
    def retranslateUi(self, MainWindow):
        global _translate
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Add Item Window"))
        self.label_slider.setText(_translate("MainWindow", "TextLabel"))
        self.add_btn.setText(_translate("MainWindow", "Add Item"))
        self.sale_btn.setText(_translate("MainWindow", "Sales"))
        self.users_btn.setText(_translate("MainWindow", "CSV"))
        self.customer_btn.setText(_translate("MainWindow", "Customers"))
        self.workers_btn.setText(_translate("MainWindow", "Workers"))
        self.expensive_btn.setText(_translate("MainWindow", "Expenses"))
        self.riders_btn.setText(_translate("MainWindow", "Riders"))
        self.calculator_btn.setText(_translate("MainWindow", "Calculator"))
        self.submit_qty_btn.setText(_translate("MainWindow", "Qty"))
        self.complete_btn.setText(_translate("MainWindow", "Completed"))
        self.print_btn.setText(_translate("MainWindow", "Print"))
        self.label.setText(_translate("MainWindow", "Cus Name"))
        self.label_2.setText(_translate("MainWindow", "Cus Number"))
        self.search_btn.setText(_translate("MainWindow", "Search"))
        self.clear_table_btn.setText(_translate("MainWindow", "Clear Table"))


    def slider(self):
            global text,count
            Slider(self.label_slider) 
        
    def open_Additem(self):
            hidden_code="adminpj1"
            if  self.lineEdit.text()!=hidden_code:
                    return QMessageBox.information(self, "error", "permition granted")
            
            from additemui import Ui_MainWindow
            self.additem=QtWidgets.QMainWindow()
            self.addpage=Ui_MainWindow()
            self.addpage.setupUi(self.additem)
            self.closethispage.close()
            self.additem.show()
         
    def openworkerspages(self):
            hidden_code="adminpj1"
            if  self.lineEdit.text() !=hidden_code:
                    return QMessageBox.information(self, "error", "permition granted")
                    
            from workers import Ui_MainWindow
            self.wworkerpage = QtWidgets.QMainWindow()
            self.openworker = Ui_MainWindow()
            self.openworker.setupUi(self.wworkerpage)
            self.closethispage.close()
            self.wworkerpage.show()


    def customers_page(self):
            hidden_code="adminpj1"
        #      check if lineentry code is not = hidden_cod
            if self.lineEdit.text() !=hidden_code:
                    return QMessageBox.information(self,"error","permition granted")
            from customers import Ui_MainWindow
            self.cuspage= QtWidgets.QMainWindow()
            self.cusopen=Ui_MainWindow()
            self.cusopen.setupUi(self.cuspage)
            
            self.closethispage.close()
            self.cuspage.show()
           

    def openriderpage(self):
            hidden_code="adminpj1"
            if self.lineEdit.text() !=hidden_code:
                    return QMessageBox.information(self,"error","permition granted")
            from riders import Ui_MainWindow
            
            self.riderpage = QtWidgets.QMainWindow()
            self.rider_p = Ui_MainWindow()
            self.rider_p.setupUi(self.riderpage)
            self.closethispage.close()
            self.riderpage.show()
            
    def opencalculate(self):
            from calculator import Ui_Dialog
            self.calculate = QtWidgets.QDialog()
            self.calculate_c = Ui_Dialog()
            self.calculate_c.setupUi(self.calculate)
        #     self.addwindowpage.close()
            self.calculate.show() 
            
            
    def opencsv(self):
            from csvpages import Ui_Dialog
            
            self.csvfile = QtWidgets.QDialog()
            self.csfpage = Ui_Dialog()
            self.csfpage.setupUi(self.csvfile)
        #     self.addwindowpage.close()
            self.csvfile.show()       
            
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
